# Namespace where all k8s controller should be deployed to
namespace: connections

# number of replicas (PODs) that will be created
replicaCount: 3

imagePullSecrets:
 name: myregkey

image:
  repository: connections-docker.artifactory.cwp.pnp-hcl.com
  tag: latest
  pullPolicy: IfNotPresent

global:
  onPrem: null

resources:
 redisServer:
  limits:
   cpu: "1"
   memory: "1024Mi"
  requests:
   cpu: "0.05"
   memory: "75Mi"
 tester:
  limits:
   cpu: "0.5"
   memory: "100Mi"
  requests:
   cpu: "0.01"
   memory: "50Mi"

env:
 # Custom NewRelic configuration below which is overriden at deploy time. Default setting is
 # null.  This default setting will defer to pick NewRelic configs from
 # configmap i.e. connections-env
 newRelic:
   enable: null
   licenseKey: null
 redisServer:
  clientTimeoutInSecs: 10
  waitForMasterDelayInSecs: 60
 k8s_cluster_domain: 'cluster.local'

internal_ca_intermediate_key_pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJSkp3SUJBQUtDQWdFQXhTSDc2U1l1VFVlYmdWbk5TOHd3akdLRVgwU3BzM3pNajJ4Z1NoUVlRTVdRb2VLag0KbHFySVJINEhXOFJmUm5COFdEZ1FmNDBWTEl1YzlFS0YzYUdldGpBNERnTE9zVmdybklkTGZzTFJ2ZFpVMU93OA0KUUtnZkdpOFhkbzNiY3RNMFVMWXNPMUd4WXY3UTA4WTlObnpuLzB6ZUZ3eDRBR3NGVjFuV2dsMytpVDJScTYrRA0KUDIwNmpxcytaWXBZQXZqdGtzeXNVQk5aQ2VDZU9HckUzRldPWFJqYXhEZTEySTUvYWFZSE5XNG02YmlVaSswUg0KV1FONTAyNFA2REhlRVE0aDJ2MUlQei80MWt4T1IyUUtpR0tiUU83NUhVdXB6VXByNzc1WVVOVVEwN2lDTmtqWg0KLzVhend5RDVZOU9uUW5Zck9yVmt0NVkyMWQ3dDBiMU16RHdONHpMVVY5UmNBSGtGWkM1djNHakJGcDl5NDk2cw0KYWw4b2ZoSmVlYzVqK0VJZWl3T1dPd043ci9mRGJHbDNxMEtseUIvZmUvUWdOTllXcndCY2JRVjExMFVZUU1ncw0KdFVaYnVkVGhsM0Z4bUlVTEFTOW5hL0htOGFTQ1pxRlRLK29TWllWc043U3NOSXpRcExsMTVLdkk5emduU1VHSQ0KakQ3MklJL2pzbmhvSkxLMk4vdzNEV0xCZGpSOEhYbGg4aHlqZlZuMjZDbDZ1Q1U2aDYwU3JOc2pvcFZDUnN4Uw0KZDJLb1IwNFQvV3RIMVBHdzNuWVV5aXVIcWVUYXB6RDFIbjd1UWNFMm9uOVVKU0dML21PNGM4NlIxRDdCS3B5Wg0KMC9GSXgvYkVGaENZR2dwdWRPMU1RUE5MWFd3aTR1WmlWeTNkcGMvQU83WnVVaU82cGhSM2VuNUVrMWtDQXdFQQ0KQVFLQ0FnQjdpTEZoU01EcFFyOXJUc2c5QUtkSHdoRHIxbzUxNFBZYnhyR01tbzBjUWZKQjBGSHRmL1ppSFl3aw0KOEtrMzdoT3VBT3d0MGs1N2pMMzl2NVk5N2lNVVRxRkIvblppWWp0cUtzcWZsQngxMTFOdjN0NWZNanZUWDhGWA0KVk13NVo2czREUUVvNXllL1BxbkVuRTBOMFRaZElXRm5sak81SjFmQWhwYkxPWFhoc1FpUlN6cDNTODdQU3ZhZQ0KRVJUWVFBQTQ1elB3TmorczFlcXd0Zy9KZDMvd1RUd0NqRnJUYTNEaTF0MWJtVHlmYUVFR2NyaFZUTDFTUm4ySA0KWjRDZXRYbDN6eE13TjdtTEtXUkFqcXVmRGhQMm5BcldWZTBCcmVwMzRaTmNqRGl3Uk1hc2wvaXNsMWJ0SjhQQQ0KMEFqWHVFK2N5Y0ZrM3FoY1hBZ3lVR3RJN1RWUm1TcFU2V3Z4ajNVSWJNa1kvR1lBdkZIUW4xbU9BTHhTQVlWMA0KVVk3aERFU2ttZVhYaGVXS2hCd1hHUnhFQ01PM3FBa0N5WlFKRjZSdE5abmRYaVNhSXdqQ05zMnd3Zk1Iay9vTQ0KMFpTam9xMURWQmpxcHdtM1QyKzZKbjNaZTNYOU1qMDNjMWZ5dGNIcmNOS1p2VHprSmVHYStqWXVKMWVDUXl6bA0KQStiTkNPMlhNT3VpcHRwMjdBTUJEalFsYUZDSUlneUJUSFF3Vy8yK2lNUE1mMnRkbHo4Mk16azlSNStneVNTcA0KYzVqNEI2UVlMSDJIb1AxbHdRQ1FwNklNNjFPMjN0OEpnWlM0OE1LekJCNFE0UHk4MVBJUWtXUXV4ZzREdzFicg0KRE9NUGRKcVJLd05PQUcxamQvNzRGUUxtRmJzZUhtenUzaTczSlBTMGpBSWo3blQ2SlFLQ0FRRUErTVV2UWJKeA0KaXExdjczNUI4WTVya0hRWWFzL00vSWp6ZVd2K2FlNnhnaGxxcC92U1k5RU9wZnNsM0ErbHJ4N2hJYmJjRTc0eA0KemlxUWtVMEdCV2lBZEt4OUk2Y2V4ZS9NQWNwTWhrakMwMVQxc2REQWVBTm5xU1lWTkx2OFNuT082RFppNTRWQw0KQzNwUDU2YUhSam1OSGFRSnZ0NEFmdjBIRXRmaW1HVnAySWRYZkVBMlFDcDdmRXVMMlV1NFZ4TlVrTkYwMEtJLw0KVk5NYjNKMFR4T21pRFEvTVU3R2VJTlBDTjlNeTJqR0c5alc3ZG9ZQ09xZmtIOXJBd0VmNW0yNU9BMmViUWxiRA0KcW9XZWxvNi9sTlM4UUtLeTB4ZlpzSWFwbWl3UW90V2VuanZCYWhFNkJBYzhUZndDZ3NJcGpNU21uYWtrWXhGdQ0KV1czclBETERTNms0cndLQ0FRRUF5dHlmclI0cXVGNzVRSitmZXZ6bmVJWUYwandLTm11Sm8zUXdGaVBxQWlvbw0KOEJlOXhIc01Sa2NrbDJ2UktNbWRxN1NIUURkb2xOdEc4ZEZucjVLZExFVmJ6eWl4c0JQTjBPTDlSd3NiTTNRNA0KVTBTMVVBOXg2ZW0raWVnRHpQcGlaWjQrS3VBUGd0a1lPRTVHQ29lZXk4ZXQ2dkduaGRGQ0VFODgxaHRlOTUwRw0KM3B0eFNNc3F1ZXhPYSsvVWpQdWFFd29YQjgxTmhadlBTSzVkTWVEN2oyZDhDNmpIMlJ3Q0lXN2IxT2tIQmd1OQ0KbFUraXhKRWRYWHhQQ1JxVERqNmVWWFNxbCtwRnBnQ01JTnZCVllYNm9RZW1nb3hSV0Q5Qloxck02Vit4WC9yOQ0KQ0Rlc1pWL1lBUElTb3dhZUZxMWZKOWt2YmZTajRzSzAzbVhYSUxMbWR3S0NBUUJXOHNSemwrVHJiWGNrSStMMA0KaEt5L3puUUNVU0w2V1B1UVF0aW5PZEE5QXBrdW9XdUZpN29zOVR6a1QydS9hM0dRa1JNV3EzRkk5OE9UcFhJbg0KVGNFb0JtbXVubWk1RWZraDN3MGtHaVpPS3ZHODlwTnUzdkhLUXc5Q1lUbnE0N3pkR0xVMDZuU05BbkVQTERzMw0KcGtIV1RGRkRydUJKZ2pLSXVYL3ZkL0tveFpVa1RtVW54REZvM2hiQkdpQVIveVdkZ0RmdCsrZGF4SGFHZ3pnMw0KcU5rRTY3S2t4ZjNZeDJxb2pGN0h1R3ZOZmpaSlZNbE9xd09teHBSOElDdnowWGZlNU1WMVNGSVhOYUNhU3NaWA0KUkl1UG84NFF6ZE0rU2JMWnVmRU9tTTlaeXRUdE41d3BjRVg1azgxazJtd2ZVVlJTNHAxZkt1YUF4MVJpcy9OaQ0KYklEdEFvSUJBQlprVi9QQityRXpPb3daa243KzM0WDhOVFJKa0U4RmU4SGhGMVc2VFNCRUN4VEZhaHNBQWhEWA0KMVlBcFZJTU9EaXRmMS9ZTXA2eVdyN1FOaTBaa0JwbFdacFh0UmYvTGo5SlkyK0ExcDZEOFdTTkgyRU9vRU1qag0KRmpjZXR4eXZIcUZjNER2WFU1NzcyNktMY1V2RVFKRDV6NGE1ZWVaWmZOTlVDOEVPY0dNZ29CdCtTUGppQkN0Vg0KbkNwcDVLcFRNMlNhbm9Rcjh6eW1RREVqbmdIZGRhY1VveXFlVE1ENFNIdnNRck96clNUTHN2ZUNQTk01dVdZUw0KVEo4U29keldxSitDS3pwdGo1YU5ST3B6bDFtYldsamdBVTh6c2Q3dHpJaGVDM1JQTGNNTWIxV3kzNEtwRzZ5dg0KQzhPVy9XZy9adHQ5SzdFVmFlbWoyRmNjSXF6blVtMENnZ0VBVW9WTml1OG8zeTJvcWExRWc2ZzBNTFprMnFJeg0KYWxUZlNjZ1E2Zzl0R2sreUZzTjhvK3BGQVdMMFZycHpuRVFRTzU5V1NiSGJnQVJHSXFhU2RFdXEyTDNYZmxoeg0KRnFoWU5FOVFYMXFlZG5RR3RybjdMUjh0cHFGRU9WZEFka0dqMnpxUnhKL2RwUldwdllldkQzVUVraWtRdzIyUQ0KQmRES1hVdjRJN2t5SmhRLzdRZm9uTmJDUnpsYlkzcS95MVd4WGkwZGZrNFd5cFpuR2RidVpjM2QrQWVmL0ZKdg0KVHNoclVrb2NKZHV0ZjcxRmVSbUZJZUhUcHhlVWhSNkFKRW1RMHVndUE5WTZvWWtjOWZMZndJS0l4RE5TZTBSag0KSGdhZXI0dkNNQ0EwM1ZLMWF4WGY1aFRkZGZYWVpaTXNMTFJwRXl4WmxSdkZQVG5VTGE1aWVUTVdaQT09DQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ0K

internal_ca_trustchain_cert_pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlKZXpDQ0JXT2dBd0lCQWdJQ0VBRXdEUVlKS29aSWh2Y05BUUVGQlFBd2dZVXhDekFKQmdOVkJBWVRBbWxsDQpNUXd3Q2dZRFZRUUlEQU5rZFdJeER6QU5CZ05WQkFjTUJtUjFZbXhwYmpFTU1Bb0dBMVVFQ2d3RGFXSnRNUXd3DQpDZ1lEVlFRTERBTnBjMk14RnpBVkJnTlZCQU1NRGtSaGRtbGtJRTFqUkc5dVlXZG9NU0l3SUFZSktvWklodmNODQpBUWtCRmhOdFkyUnZibUZuYUVCcFpTNXBZbTB1WTI5dE1CNFhEVEUzTURneE9ERXdORGd6TWxvWERURTVNRGd4DQpPREV3TkRnek1sb3dkREVYTUJVR0ExVUVBd3dPUkdGMmFXUWdUV05FYjI1aFoyZ3hEREFLQmdOVkJBZ01BMlIxDQpZakVMTUFrR0ExVUVCaE1DYVdVeElqQWdCZ2txaGtpRzl3MEJDUUVXRTIxalpHOXVZV2RvUUdsbExtbGliUzVqDQpiMjB4RERBS0JnTlZCQW9NQTJsaWJURU1NQW9HQTFVRUN3d0RhWE5qTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGDQpBQU9DQWc4QU1JSUNDZ0tDQWdFQXhTSDc2U1l1VFVlYmdWbk5TOHd3akdLRVgwU3BzM3pNajJ4Z1NoUVlRTVdRDQpvZUtqbHFySVJINEhXOFJmUm5COFdEZ1FmNDBWTEl1YzlFS0YzYUdldGpBNERnTE9zVmdybklkTGZzTFJ2ZFpVDQoxT3c4UUtnZkdpOFhkbzNiY3RNMFVMWXNPMUd4WXY3UTA4WTlObnpuLzB6ZUZ3eDRBR3NGVjFuV2dsMytpVDJSDQpxNitEUDIwNmpxcytaWXBZQXZqdGtzeXNVQk5aQ2VDZU9HckUzRldPWFJqYXhEZTEySTUvYWFZSE5XNG02YmlVDQppKzBSV1FONTAyNFA2REhlRVE0aDJ2MUlQei80MWt4T1IyUUtpR0tiUU83NUhVdXB6VXByNzc1WVVOVVEwN2lDDQpOa2paLzVhend5RDVZOU9uUW5Zck9yVmt0NVkyMWQ3dDBiMU16RHdONHpMVVY5UmNBSGtGWkM1djNHakJGcDl5DQo0OTZzYWw4b2ZoSmVlYzVqK0VJZWl3T1dPd043ci9mRGJHbDNxMEtseUIvZmUvUWdOTllXcndCY2JRVjExMFVZDQpRTWdzdFVaYnVkVGhsM0Z4bUlVTEFTOW5hL0htOGFTQ1pxRlRLK29TWllWc043U3NOSXpRcExsMTVLdkk5emduDQpTVUdJakQ3MklJL2pzbmhvSkxLMk4vdzNEV0xCZGpSOEhYbGg4aHlqZlZuMjZDbDZ1Q1U2aDYwU3JOc2pvcFZDDQpSc3hTZDJLb1IwNFQvV3RIMVBHdzNuWVV5aXVIcWVUYXB6RDFIbjd1UWNFMm9uOVVKU0dML21PNGM4NlIxRDdCDQpLcHlaMC9GSXgvYkVGaENZR2dwdWRPMU1RUE5MWFd3aTR1WmlWeTNkcGMvQU83WnVVaU82cGhSM2VuNUVrMWtDDQpBd0VBQWFPQ0FnTXdnZ0gvTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRklHVUg3RE1kR2R5DQpFL1lZd0pTZ3llR3Jhdy8wTUI4R0ExVWRJd1FZTUJhQUZQSm1Hei9nUVM1VmtSelQwa0FQc0ttY3kwOFFNQXNHDQpBMVVkRHdRRUF3SUJwakFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQVRCc0JnTlZIUjhFWlRCak1ES2dNS0F1DQpoaXhvZEhSd09pOHZjR3RwTG5Od1lYSnJiR2x1WjJOaExtTnZiUzlUY0dGeWEyeHBibWRTYjI5MExtTnliREF0DQpvQ3VnS1lZbmFIUjBjRG92TDNCcmFTNWlZV05yZFhBdVkyOXRMMU53WVhKcmJHbHVaMUp2YjNRdVkzSnNNRU1HDQpBMVVkRVFROE1EcUNHMU53WVhKcmJHbHVaeUJKYm5SbGNtMXBaR2xoZEdVZ1EwRWdNWUliVTNCaGNtdHNhVzVuDQpJRU5CSUVsdWRHVnliV2xrYVdGMFpTQXhNSUhXQmdnckJnRUZCUWNCQVFTQnlUQ0J4akE0QmdnckJnRUZCUWN3DQpBb1lzYUhSMGNEb3ZMM0JyYVM1emNHRnlhMnhwYm1kallTNWpiMjB2VTNCaGNtdHNhVzVuVW05dmRDNWpjblF3DQpNd1lJS3dZQkJRVUhNQUtHSjJoMGRIQTZMeTl3YTJrdVltRmphM1Z3TG1OdmJTOVRjR0Z5YTJ4cGJtZFNiMjkwDQpMbU55ZERBc0JnZ3JCZ0VGQlFjd0FZWWdhSFIwY0Rv#dkwzQnJhUzV6Y0dGeWEyeHBibWRqWVM1amIyMHZiMk56DQpjQzh3SndZSUt3WUJCUVVITUFHR0cyaDBkSEE2THk5d2Eya3VZbUZqYTNWd0xtTnZiUzl2WTNOd0x6QU5CZ2txDQpoa2lHOXcwQkFRVUZBQU9DQkFFQWJiZkszdUFVaGJIeGRINis5allUamE3K2dhSDdXemVyY1RpZVpyeWwwSnJpDQo4bXhGOHpaSXdsWjgyS0RWWWNVTVJQRUJldjQvN0gyaGpvbnhubHpWOGVFOUpCcDQza05OM1JId2l0MUNvakVJDQplWEtua3FHNVhhN0tqdUlqWEFlYXFYcVpnYWtHTmtSSTd5c3g1VTZrSDgrakk2bHl1VXFRMEd2Tyt3KytvNGVQDQprTWxMaFhUOGpUeVU0SVBOVWlMMG9MMlpId21UZk9xdERvUUcwVTBlWGNDTWVsRkdyVlphUGdxU2NUZU9RTmNtDQpyMCtTdFJBQ1ZsMVV3T0h5Y1JMbVM0WHlFS3EzUDQ4bWczY3dUbWlJTlY3WW1KbzExd3hUY2hqQytodmdudHB5DQpRQmFEYzNsSG9RTlVJT3MzTVBobUJrelNEL1JFeGZaVGtVL005VERVNnh2RDY0bGNMNmRpczd1V3NOQ04vcHB0DQpRUkhpRUVQTkxMRisxYTF6ZG5rK2d6eUc0bWh0V1FQaEJsTlNwUDE0MTVkSmhJU1NvZC9NRTcvSXpvK2gwVHRhDQpnaCs0eTQ5QkZkSzB3VVZ0cHQzbjZMY1BXWDNWNUVKWkZ3S1k2SXMvMUxXSzQ0eDVNN0pqeUtGdm9WZFVFaFE3DQpzVmtiYmR3QzNuZys5Q2RTRnpFMTU2Vy9TV2RDczZBakFFTms5VURPVUZkZ2kvN1pLRzNOMk1jZTNNVFRHTGw3DQpDbE40V0V2em8wcmZ1NUVNY3R6Wk5qVkYrdDRuS0dIZkgvYnNBd3lBNmpleUU1MmJweEx1NEpQZGt2MklVakRCDQpVelVkcEgwUUNGOWRXaWJValNnTXdqNmpsSVovOXNuYzlKRnp1K2gwMHVaM0wvVk1KSW4yY3ZJZy9SSFBBcWVkDQp1SlZ2aUd1SFptMmlsdFdNdmhjdDhjdFNmWHBNOW45dndCWVFKMUZabEl5NE5yY1VWcjVNQzRkd3I5ejdiVUdDDQpMS2pQbGtndjJhOUsvMG53Vkp2WFgvREMvTi9zczl2RXhwc3JtSEI0QkUxY0I0TUxnZmphMm1ZYnMrMUdxNFlPDQpGeE5uN2RjRnZQZlJIdnN5TXdteDM3b2t0RFFHWVQvYWQxd01sakRUbDB0S0tPaVNyU2NueWNLcHZrNlRndGZVDQpaT2haN1ZJbkNuS2wzcUJseHdXRHFPOXBFWGo0eUVtaStieXNDSmt4L3JQTlZGdHRmYkZ4bGVCcWkxUWRwWEdSDQpzZkxac01aTjB2NHBpdTdjZnFESXRRNmVmcWpZakJuenVQanNacmVlRjRGUTRvd1k3bkRLTWJvRFBoWDZ1ZUM1DQpxVVVnYjNQZFVjM0gyWXVzWGI4SkdyUFNiRlRNTkE3dlB6a25lVnlOOVVLNUZvSlA5RElKL3o1SitxQk1HTGYvDQpEY2xhSC9IQ3BnT3hZbXcrblRYbFFFUlFpL3RTTUczU2kwMWRpdi9obkRoVi9KQ0VINkc0VFVHSFhCMWVKckV3DQoyZnVDTktLTnU2L0UySVdrcmJ3TGlIYkFFSjhkbVFhSE5uYVR6dTFRWU12V3Z1NTZPNTBucm5CVHByWFBlSElLDQp3eFRzTExGSVZsQWowUFBVZXdFcTJPbkRHUlV0SHBVTnpLT2JRYy9zbW80ZWZ1dGdMQlNKSm95akc1QUVpcVlDDQpMcXlPOU9OYU1GdWdtYmZwL1BWTGQ4M1RaZk5hZzQ3WDVqbkhuM0phUE43TDlpUEloZm50TnVFbUFEcVRpbm4rDQpTRktIL0VmNUhpM045WklEKzVieStmUjU3SE0yRUt5ZGNwdVNMRmNSTUE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
